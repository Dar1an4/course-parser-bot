import asyncio
from aiogram import Bot, Dispatcher, executor, types
import configparser
from course_stat import *

config = configparser.ConfigParser()
config.read("config.ini")
TOKEN = config['Telegram']['TOKEN']

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
counter_day_notif = 0
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    global user_id
    user_id = message.chat.id
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!")


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    global user_id
    user_id = message.chat.id
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n - /courses - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç \n - /notif_course - "
        "–ü—Ä–∏—Å—ã–ª–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä (09:00 –∏ 21:00) \n - /stop_notif - –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É "
        "\n - /notif_change_course - –≤–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫—É—Ä—Å–∞ \n"
        " - /stop_forward_course - –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫—É—Ä—Å–∞ \n - /send_course_sheet - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ë–î")


@dp.message_handler(commands=['courses'])
async def process_courses_command(message: types.Message):
    global usd_pars_list, eur_pars_list
    usd_pars_list = usd_pars()
    eur_pars_list =eur_pars()
    await message.answer(f"üá∫üá∏ –î–æ–ª–ª–∞—Ä:\n–ø–æ–∫—É–ø–∫–∞: {usd_pars_list[0]}, –ø—Ä–æ–¥–∞–∂–∞: {usd_pars_list[1]}, —á—ë—Ä–Ω—ã–π: {usd_pars_list[2]}"
                         f" \nüá™üá∫ –ï–≤—Ä–æ:\n–ø–æ–∫—É–ø–∫–∞: {eur_pars_list[0]}, –ø—Ä–æ–¥–∞–∂–∞: {eur_pars_list[1]}, —á—ë—Ä–Ω—ã–π: {eur_pars_list[2]}")


@dp.message_handler(commands=['notif_course'])
async def process_notif_course(message: types.Message):
    global counter_day_notif, usd_pars_list, eur_pars_list, timenow
    usd_pars_list = usd_pars()
    eur_pars_list = eur_pars()
    counter_day_notif = 0
    await message.answer(f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–∞ (–≤ 09:00 –∏ –≤ 21:00) –≤–∫–ª—é—á–µ–Ω–æ!")
    while counter_day_notif == 0:
        timenow = datetime.datetime.today().strftime("%H:%M")
        if timenow == '21:00' or timenow == '09:00':
            save_course(usd_pars, eur_pars)
            await message.answer(
                f"üá∫üá∏ –î–æ–ª–ª–∞—Ä:\n–ø–æ–∫—É–ø–∫–∞: {usd_pars_list[0]}, –ø—Ä–æ–¥–∞–∂–∞: {usd_pars_list[1]}, —á—ë—Ä–Ω—ã–π: {usd_pars_list[2]}"
                f" \nüá™üá∫ –ï–≤—Ä–æ:\n–ø–æ–∫—É–ø–∫–∞: {eur_pars_list[0]}, –ø—Ä–æ–¥–∞–∂–∞: {eur_pars_list[1]}, —á—ë—Ä–Ω—ã–π: {eur_pars_list[2]}")
            await asyncio.sleep(45)
        else:
            await asyncio.sleep(45)


@dp.message_handler(commands=['stop_notif'])
async def process_notif_course(message: types.Message):
    await message.answer(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    global counter_day_notif
    counter_day_notif = 1


@dp.message_handler(commands=['notif_change_course'])
async def notif_change_course(message: types.Message):
    await message.answer(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∫—É—Ä—Å–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –∫–æ–ø–µ–µ–∫ –≤–∫–ª—é—á–µ–Ω–æ!")
    global counter_change_course
    counter_change_course = 0
    while counter_change_course == 0:
        if forward_stats(usd_pars, eur_pars):
            #pass
            await asyncio.sleep(60)
        else:
            await message.answer(f"–∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ /courses")


@dp.message_handler(commands=['stop_forward_course'])
async def stop_forward_course(message: types.Message):
    await message.answer(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    global counter_change_course
    counter_change_course = 1


@dp.message_handler(commands=['send_course_sheet'])
async def send_course_sheet(message: types.Message):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª")
    await message.answer_document(open('sheet_course.csv', 'rb'))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)